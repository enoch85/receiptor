services:
  # PostgreSQL Database
  postgres:
    image: supabase/postgres:15.1.0.147
    container_name: receiptor-db
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: postgres
      POSTGRES_HOST: postgres
    ports:
      - '5432:5432'
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ../supabase/migrations:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - receiptor

  # Supabase Studio (Database UI)
  studio:
    image: supabase/studio:20231123-64a766a
    container_name: receiptor-studio
    restart: unless-stopped
    environment:
      SUPABASE_URL: http://kong:8000
      STUDIO_PG_META_URL: http://meta:8080
      SUPABASE_ANON_KEY: ${ANON_KEY}
      SUPABASE_SERVICE_KEY: ${SERVICE_ROLE_KEY}
    ports:
      - '3030:3000'
    depends_on:
      meta:
        condition: service_healthy
    networks:
      - receiptor

  # Kong API Gateway (Routes to Auth, Storage, etc.)
  kong:
    image: kong:2.8.1
    container_name: receiptor-kong
    restart: unless-stopped
    environment:
      KONG_DATABASE: 'off'
      KONG_DECLARATIVE_CONFIG: /var/lib/kong/kong.yml
      KONG_DNS_ORDER: LAST,A,CNAME
      KONG_PLUGINS: request-transformer,cors,key-auth,acl
      KONG_NGINX_PROXY_PROXY_BUFFER_SIZE: 160k
      KONG_NGINX_PROXY_PROXY_BUFFERS: 64 160k
    ports:
      - '8000:8000'
    volumes:
      - ./supabase/kong.yml:/var/lib/kong/kong.yml:ro
    depends_on:
      - auth
      - rest
      - storage
    networks:
      - receiptor

  # Supabase Auth
  auth:
    image: supabase/gotrue:v2.132.3
    container_name: receiptor-auth
    restart: unless-stopped
    environment:
      GOTRUE_API_HOST: 0.0.0.0
      GOTRUE_API_PORT: 9999
      API_EXTERNAL_URL: ${API_EXTERNAL_URL:-http://localhost:8000}

      # Database
      GOTRUE_DB_DRIVER: postgres
      GOTRUE_DB_DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD:-postgres}@postgres:5432/postgres?search_path=auth

      # JWT
      GOTRUE_JWT_ADMIN_ROLES: service_role
      GOTRUE_JWT_AUD: authenticated
      GOTRUE_JWT_DEFAULT_GROUP_NAME: authenticated
      GOTRUE_JWT_EXP: 3600
      GOTRUE_JWT_SECRET: ${JWT_SECRET}

      # Email Auth
      GOTRUE_DISABLE_SIGNUP: ${DISABLE_SIGNUP:-false}
      GOTRUE_SITE_URL: ${SITE_URL:-http://localhost:3000}
      GOTRUE_MAILER_AUTOCONFIRM: ${MAILER_AUTOCONFIRM:-true}

      # Email Provider (Inbucket for testing)
      GOTRUE_SMTP_HOST: inbucket
      GOTRUE_SMTP_PORT: 2500
      GOTRUE_SMTP_USER: noreply@receiptor.app
      GOTRUE_SMTP_PASS: password
      GOTRUE_SMTP_ADMIN_EMAIL: admin@receiptor.app
      GOTRUE_MAILER_URLPATHS_CONFIRMATION: /auth/confirm
      GOTRUE_MAILER_URLPATHS_INVITE: /auth/invite
      GOTRUE_MAILER_URLPATHS_RECOVERY: /auth/recover

      # OAuth Providers (configure for production)
      GOTRUE_EXTERNAL_GOOGLE_ENABLED: ${GOOGLE_ENABLED:-false}
      GOTRUE_EXTERNAL_GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID:-}
      GOTRUE_EXTERNAL_GOOGLE_SECRET: ${GOOGLE_SECRET:-}
      GOTRUE_EXTERNAL_GOOGLE_REDIRECT_URI: ${API_EXTERNAL_URL:-http://localhost:8000}/auth/v1/callback

      GOTRUE_EXTERNAL_APPLE_ENABLED: ${APPLE_ENABLED:-false}
      GOTRUE_EXTERNAL_APPLE_CLIENT_ID: ${APPLE_CLIENT_ID:-}
      GOTRUE_EXTERNAL_APPLE_SECRET: ${APPLE_SECRET:-}
      GOTRUE_EXTERNAL_APPLE_REDIRECT_URI: ${API_EXTERNAL_URL:-http://localhost:8000}/auth/v1/callback
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - receiptor

  # PostgREST (Auto REST API from PostgreSQL)
  rest:
    image: postgrest/postgrest:v11.2.0
    container_name: receiptor-rest
    restart: unless-stopped
    environment:
      PGRST_DB_URI: postgres://postgres:${POSTGRES_PASSWORD:-postgres}@postgres:5432/postgres
      PGRST_DB_SCHEMAS: public,storage,graphql_public
      PGRST_DB_ANON_ROLE: anon
      PGRST_JWT_SECRET: ${JWT_SECRET}
      PGRST_DB_USE_LEGACY_GUCS: 'false'
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - receiptor

  # Supabase Realtime
  realtime:
    image: supabase/realtime:v2.25.35
    container_name: receiptor-realtime
    restart: unless-stopped
    environment:
      PORT: 4000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      DB_NAME: postgres
      DB_AFTER_CONNECT_QUERY: 'SET search_path TO _realtime'
      DB_ENC_KEY: supabaserealtime
      API_JWT_SECRET: ${JWT_SECRET}
      FLY_ALLOC_ID: fly123
      FLY_APP_NAME: realtime
      SECRET_KEY_BASE: ${JWT_SECRET}
      ERL_AFLAGS: -proto_dist inet_tcp
      ENABLE_TAILSCALE: 'false'
      DNS_NODES: "''"
    command: >
      sh -c "/app/bin/migrate && /app/bin/realtime eval 'Realtime.Release.seeds(Realtime.Repo)' && /app/bin/server"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - receiptor

  # Supabase Storage
  storage:
    image: supabase/storage-api:v0.43.11
    container_name: receiptor-storage
    restart: unless-stopped
    environment:
      ANON_KEY: ${ANON_KEY}
      SERVICE_KEY: ${SERVICE_ROLE_KEY}
      POSTGREST_URL: http://rest:3000
      PGRST_JWT_SECRET: ${JWT_SECRET}
      DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD:-postgres}@postgres:5432/postgres
      FILE_SIZE_LIMIT: 52428800
      STORAGE_BACKEND: file
      FILE_STORAGE_BACKEND_PATH: /var/lib/storage
      TENANT_ID: stub
      REGION: stub
      GLOBAL_S3_BUCKET: stub
      ENABLE_IMAGE_TRANSFORMATION: 'true'
      IMGPROXY_URL: http://imgproxy:5001
    volumes:
      - storage-data:/var/lib/storage
    depends_on:
      postgres:
        condition: service_healthy
      rest:
        condition: service_started
    networks:
      - receiptor

  # Image Proxy (for image transformations)
  imgproxy:
    image: darthsim/imgproxy:v3.8.0
    container_name: receiptor-imgproxy
    restart: unless-stopped
    environment:
      IMGPROXY_BIND: ':5001'
      IMGPROXY_LOCAL_FILESYSTEM_ROOT: /
      IMGPROXY_USE_ETAG: 'true'
      IMGPROXY_ENABLE_WEBP_DETECTION: 'true'
    volumes:
      - storage-data:/var/lib/storage
    networks:
      - receiptor

  # PostgreSQL Meta (for Studio)
  meta:
    image: supabase/postgres-meta:v0.68.0
    container_name: receiptor-meta
    restart: unless-stopped
    environment:
      PG_META_PORT: 8080
      PG_META_DB_HOST: postgres
      PG_META_DB_PORT: 5432
      PG_META_DB_NAME: postgres
      PG_META_DB_USER: postgres
      PG_META_DB_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'wget', '--no-verbose', '--tries=1', '--spider', 'http://localhost:8080/health']
      interval: 5s
      timeout: 5s
      retries: 3
    networks:
      - receiptor

  # Inbucket (Email testing - catches all emails)
  inbucket:
    image: inbucket/inbucket:stable
    container_name: receiptor-inbucket
    restart: unless-stopped
    ports:
      - '2500:2500' # SMTP
      - '9000:9000' # Web UI
    networks:
      - receiptor

  # Next.js Web App
  web:
    build:
      context: ..
      dockerfile: docker/web/Dockerfile.dev
    container_name: receiptor-web-app
    restart: unless-stopped
    environment:
      - NEXT_PUBLIC_SUPABASE_URL=http://localhost:8000
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SERVICE_ROLE_KEY}
    ports:
      - '3000:3000'
    volumes:
      - ../web:/app/web:cached
      - ../shared:/app/shared:cached
      - web-node-modules:/app/web/node_modules
    working_dir: /app/web
    command: npm run dev
    depends_on:
      - kong
      - auth
    networks:
      - receiptor

volumes:
  postgres-data:
    name: receiptor-postgres-data
  storage-data:
    name: receiptor-storage-data
  web-node-modules:
    name: receiptor-web-node-modules

networks:
  receiptor:
    name: receiptor-network
    driver: bridge
